name: Build and Test Python App

on:
  push:
    branches:
      - main
      - AddQueryStringForInitialPrompting
  pull_request:
    branches:
      - main
      - AddQueryStringForInitialPrompting
  workflow_dispatch:

jobs:
  test_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v1
        with:
          python-version: '3.11'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          venv\Scripts\Activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: |
          export PYTHONPATH=$(pwd)
          pytest

  test_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Test with pytest
        env:
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZUREOPENAIENDPOINT }}
          AZURE_OPENAI_MODEL: ${{ secrets.AZUREOPENAIMODEL }}
          AZURE_OPENAI_KEY: ${{ secrets.AZUREOPENAIKEY }}
          AZURE_OPENAI_EMBEDDING_NAME: ${{ secrets.AZUREOPENAIEMBEDDINGNAME }}
          AZURE_COSMOSDB_ACCOUNT: ${{ secrets.AZURECOSMOSDBACCOUNT }}
          AZURE_COSMOSDB_DATABASE: ${{ secrets.AZURECOSMOSDBDATABASE }}
          AZURE_COSMOSDB_CONVERSATIONS_CONTAINER: ${{ secrets.AZURECOSMOSDBCONTAINER }}
          AZURE_COSMOSDB_ACCOUNT_KEY: ${{ secrets.AZURECOSMOSDBACCOUNTKEY }}
          AZURE_SEARCH_SERVICE: ${{ secrets.AZURESEARCHSERVICE }}
          AZURE_SEARCH_INDEX: ${{ secrets.AZURESEARCHINDEX }}
          AZURE_SEARCH_KEY: ${{ secrets.AZURESEARCHKEY }}
          AZURE_SEARCH_QUERY: ${{ secrets.AZURESEARCHQUERY }}
          ELASTICSEARCH_EMBEDDING_MODEL_ID: ${{ secrets.ELASTICSEARCHEMBEDDINGMODELID }}
          ELASTICSEARCH_ENCODED_API_KEY: ${{ secrets.ELASTICSEARCHENCODEDAPIKEY }}
          ELASTICSEARCH_ENDPOINT: ${{ secrets.ELASTICSEARCHENDPOINT }}
          ELASTICSEARCH_INDEX: ${{ secrets.ELASTICSEARCHINDEX }}
          ELASTICSEARCH_QUERY: ${{ secrets.ELASTICSEARCHQUERY }}
        run: |
          export PYTHONPATH=$(pwd)
          coverage run -m pytest -v --show-capture=stdout
          coverage report -m --include=app.py,backend/*,tests/*
          coverage xml

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '50 80'

  deploy:
    runs-on: ubuntu-latest
    needs: [test_windows, test_linux]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: 'sample-app-github-cd'
          slot-name: 'Production'
